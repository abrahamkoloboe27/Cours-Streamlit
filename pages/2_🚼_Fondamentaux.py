import streamlit as st
import pandas as pd
from datetime import time, datetime, date
st.set_page_config(
    page_title="üöº Fondamentaux",
    page_icon=":chart_with_upwards_trend:",
    layout="wide",
    initial_sidebar_state="expanded",
)
st.title("üöº Fondamentaux")
tab1,tab2,tab3,tab4 = st.tabs(["üëãüèæHello World !","üî§Texte",
                               "üñáÔ∏èWidget","üéûÔ∏èLayouts" ])

with tab1 : 
    st.markdown("""
                Pour commencer, cr√©ons dans un dossier, un fichier **app.py**
                dans lequel nous allons √©crire le code suivant :
                """)
    code_ = """
    import streamlit as st
    
    st.write("Hello World ! ")
    """
    st.code(code_, "python")
    st.markdown("""
                Puis dans l'invite de commande ex√©cutons notre application en lancant  :
                """)
    st.code("streamlit run app.py", language="python")
    
with tab2 : 
    a,b,c,d = st.tabs(["Structures", "Markdown et HTML", "Write", "Messages de statut"])
    with a : 
       
        st.title("Tutoriel :red[Streamlit]")
        st.header(':blue[Introduction aux bases de donn√©es]')
        st.subheader("üë®üèæ‚Äçüíª Applications web")
        st.text("Ma premi√®re application web avec Streamlit ! ")
        with st.expander("Code", True) : 
            code_ = """
            st.title("Tutoriel :red[Streamlit]")
            st.header(':blue[Introduction aux bases de donn√©es]')
            st.subheader("üë®üèæ‚Äçüíª Applications web")
            st.text("Ma premi√®re application web avec Streamlit ! ")            
            """
            st.code(code_ , "python")
    with b : 
        st.header("Markdown")
        st.markdown("Pour √©crire du code Markdown, il suffit d'utiliser la fonction :green[st.markdown()]")
        st.markdown("### Ceci est un texte ecrit en markdonw")
        st.markdown("### Ceci est un tableau r√©alis√© en markdonw")
        st.markdown('''
                    | Data Science Tools     |
                    |------------------------|
                    | Jupyter Notebook       |
                    | RStudio                |
                    | VS Code with Python    |
                    ''')
        st.write("\n")
        with st.expander("Code", True) :
            st.code("""
                st.markdown("### Ceci est un texte ecrit en markdonw")
                st.markdown("### Ceci est un tableau r√©alis√© en markdonw")
                st.markdown('''
                    | Data Science Tools     |
                    |------------------------|
                    | Jupyter Notebook       |
                    | RStudio                |
                    | VS Code with Python    |
                ''')
            """, language="python")
        st.header("**HTML**")
        st.markdown("""
                    Pour √©crire du code HMTL, on utilise encore la fonction **:green[st.markdown()]** avec en argument 
                    du code HTML et cettre fois ci le param√®tre **:red[unsafe_allow_html]=:blue[True]**.
                    
                    **Exemple**
                    """)
        # Utilisation de st.markdown pour afficher du code HTML
        st.markdown("<h1 style='text-align: center;'>Titre en HTML</h1>", unsafe_allow_html=True)
        st.markdown("<p style='color: blue;'>Ceci est un paragraphe en HTML.</p>", unsafe_allow_html=True)

        # Vous pouvez √©galement utiliser des balises HTML directement dans st.markdown
        st.markdown("<hr>", unsafe_allow_html=True)  # Ligne horizontale en HTML

        # Exemple avec une liste non ordonn√©e
        html_list = '''
        <ul>
            <li>√âl√©ment 1</li>
            <li>√âl√©ment 2</li>
            <li>√âl√©ment 3</li>
        </ul>
        '''
        st.markdown(html_list, unsafe_allow_html=True)
        
        with st.expander("Code", True) :
            st.code("""
                    # Utilisation de st.markdown pour afficher du code HTML
                    st.markdown("<h1 style='text-align: center;'>Titre en HTML</h1>", unsafe_allow_html=True)
                    st.markdown("<p style='color: blue;'>Ceci est un paragraphe en HTML.</p>", unsafe_allow_html=True)

                    # Vous pouvez √©galement utiliser des balises HTML directement dans st.markdown
                    st.markdown("<hr>", unsafe_allow_html=True)  # Ligne horizontale en HTML

                    # Exemple avec une liste non ordonn√©e
                    html_list = '''
                    <ul>
                        <li>√âl√©ment 1</li>
                        <li>√âl√©ment 2</li>
                        <li>√âl√©ment 3</li>
                    </ul>
                    '''
                    st.markdown(html_list, unsafe_allow_html=True)   
                    """, language="python")
    with c : 
        st.markdown("""
                    ## La fonction :red[st.write()]
                    La fonction `st.write()` est une fonction polyvalente dans Streamlit qui permet d'afficher 
                    diff√©rents types de contenus, qu'il s'agisse de texte simple, de donn√©es structur√©es ou d'objets graphiques.
                    Elle offre une flexibilit√© significative pour communiquer des informations de mani√®re concise 
                    et efficace dans une application Streamlit.
                    """)
        
        st.markdown("""**Utilisation de base :**""")
        # Affichage de texte
        st.write("Ceci est un texte simple.")

        # Affichage de donn√©es structur√©es (DataFrame, listes, dictionnaires, etc.)
        st.text("Voici une dataframe")
        data = pd.DataFrame({'Nom': ['Alice', 'Bob', 'Charlie'], '√Çge': [25, 30, 22]})
        st.write(data)

       

       
        with st.expander("Code", False) :
            st.code("""
                    import streamlit as st
                    import pandas as pd
                    # Affichage de texte
                    st.write("Ceci est un texte simple.")

                    # Affichage de donn√©es structur√©es (DataFrame, listes, dictionnaires, etc.)
                    data = pd.DataFrame{'Nom': ['Alice', 'Bob', 'Charlie'], '√Çge': [25, 30, 22]}
                    st.write(data)

                    """, language="python")
        st.markdown("""
                    **Caract√©ristiques cl√©s :**
                    - **Polyvalence :** La fonction `st.write()` peut accepter une grande vari√©t√© de types de 
                    , y compris du texte, des donn√©es structur√©es, des images, du code, etc.
                    - **Adaptabilit√© :** En fonction du type de contenu fourni en argument, Streamlit ajuste automatiquement 
                    la mani√®re dont l'information est affich√©e.
                    - **Simplicit√© d'utilisation :** Il s'agit d'une m√©thode simple pour afficher des 
                    informations sans n√©cessiter de syntaxe complexe.

                    Que ce soit pour des d√©monstrations rapides, la visualisation de donn√©es, l'affichage de r√©sultats 
                    de calculs ou la pr√©sentation de contenu divers, `st.write()` est un outil polyvalent et central dans 
                    le d√©veloppement d'applications Streamlit.
                                        """)
    with d : 
        st.markdown("""
                    Streamlit offre diff√©rentes fonctions de messages de statut pour permettre aux d√©veloppeurs de 
                    communiquer efficacement avec les utilisateurs de l'application. Ces fonctions facilitent la mise 
                    en √©vidence d'informations importantes, de mises en garde, d'erreurs ou de succ√®s. Voici une description 
                    de certaines de ces fonctions :

                    1. **`st.warning(message)` :**
                    - Utilis√© pour afficher un message d'avertissement.
                    - Le message est g√©n√©ralement mis en √©vidence avec une couleur jaune pour attirer l'attention de l'utilisateur.
                    - Exemple : """)
        
        st.warning("Cette op√©ration peut entra√Æner la perte de donn√©es.")
        with st.expander("Code", True) :
            st.code("""st.warning("Cette op√©ration peut entra√Æner la perte de donn√©es.")""", language="python")
        st.markdown("""
                    2. **`st.info(message)` :**
                    - Affiche un message informatif.
                    - Souvent utilis√© pour fournir des d√©tails suppl√©mentaires ou des informations contextuelles.
                    - Exemple :""")
         
        st.info("Consultez la documentation pour plus d'informations.")
        with st.expander("Code", True) :
            st.code("""st.info("Consultez la documentation pour plus d'informations.")""", language="python")
        st.markdown("""3. **`st.success(message)` :**
                    - Utilis√© pour indiquer que quelque chose s'est bien pass√© ou a r√©ussi.
                    - Souvent utilis√© apr√®s une op√©ration r√©ussie.
                    - Exemple :""")
        st.success("Les donn√©es ont √©t√© enregistr√©es avec succ√®s.")
        with st.expander("Code", True) :
            st.code("""st.success("Les donn√©es ont √©t√© enregistr√©es avec succ√®s.")""", language="python")
        st.markdown(""" 4. **`st.error(message)` :**
                    - Utilis√© pour signaler une erreur ou un probl√®me.
                    - La couleur rouge est g√©n√©ralement utilis√©e pour attirer l'attention sur l'importance de l'erreur.
                    - Exemple : """)
        st.error("Une erreur s'est produite lors du chargement des donn√©es.")
        with st.expander("Code", True) :
            st.code("""st.error("Une erreur s'est produite lors du chargement des donn√©es.")""", language="python")
        st.markdown("""
                    5. **`st.exception(exception)` :**
                    - Affiche une exception avec des d√©tails.
                    - Utile pour afficher des messages d'erreur d√©taill√©s lorsqu'une exception se produit.
                    - Exemple :  """)
        st.exception(ValueError("Valeur non valide d√©tect√©e."))
        with st.expander("Code", True) :
            st.code("""st.error("Une erreur s'est produite lors du chargement des donn√©es.")""", language="python")
        st.markdown("""Ces fonctions de messages de statut sont utiles pour am√©liorer l'exp√©rience utilisateur en 
                    fournissant des informations claires et cibl√©es. Ils peuvent √™tre utilis√©s dans divers sc√©narios, 
                    que ce soit pour avertir des 
                    actions potentiellement risqu√©es, informer sur les succ√®s, ou signaler des erreurs.
                    """)
with tab3 : 
    st.title(" Widgets")
    a,b,c,d,e,f,g,h,i = st.tabs(["Button","Checkbox","Radio Button", 
                    "Select Box","Multiselect","Slider", 
                    "Text/Number Input","Date input", "Formulaire"])
    with a : 
        st.markdown("""
        `st.button` est une fonction dans Streamlit qui permet de cr√©er un 
        bouton interactif dans une application Streamlit. 
        Ce bouton peut √™tre utilis√© pour d√©clencher des actions ou des
        √©v√©nements sp√©cifiques lorsque l'utilisateur clique dessus. Il offre une 
        mani√®re simple d'ajouter de l'interactivit√© √† votre application en r√©agissant aux actions 
        de l'utilisateur.

       
        """)
        with st.expander('**Utilisation :**', True):
            if st.button("Cliquez-moi"):
                st.markdown("""### :blue[Vous venez de cliquer sur le boutton !]""")
            
        with st.expander("Code", True):
            st.code("""
         import streamlit as st
        # Cr√©ation d'un bouton avec st.button
        if st.button("Cliquez-moi"):
            st.write("Vous venez de cliquer sur le boutton !")
        """)
        
        st.markdown("""
        Dans cet exemple, le bouton est cr√©√© avec l'√©tiquette "Cliquez-moi". 
        Lorsque l'utilisateur clique sur le bouton, le bloc de code √† 
        l'int√©rieur du `if st.button(...)` est ex√©cut√©, et le message 
        "Le bouton a √©t√© cliqu√© !" est affich√©.

        **Fonctionnalit√©s cl√©s :**
        - **R√©activit√© :** Le bloc de code associ√© au bouton est ex√©cut√© 
        lorsqu'il est activ√© par l'utilisateur.
        - **Personnalisation :** Vous pouvez personnaliser l'√©tiquette du bouton pour 
        qu'elle refl√®te l'action souhait√©e.
        - **Int√©gration :** Les boutons peuvent √™tre utilis√©s pour d√©clencher des mises √† jour ou 
        des modifications dans l'interface utilisateur.

        En utilisant `st.button`, vous pouvez rendre votre application Streamlit 
        plus interactive et permettre aux utilisateurs d'initier des actions sp√©cifiques 
        en un seul clic. Cela peut √™tre utile pour impl√©menter des fonctionnalit√©s telles que le 
        chargement de donn√©es, le calcul de r√©sultats, ou tout autre comportement interactif que vous souhaitez 
        int√©grer dans votre application.
        """)
    with b : 
        st.markdown("""
        `st.checkbox` est une fonction dans Streamlit qui permet de cr√©er une case √† cocher 
        (checkbox) dans une application Streamlit. Les cases √† cocher 
        sont utiles pour permettre aux utilisateurs de s√©lectionner ou de 
        d√©s√©lectionner des options et sont souvent utilis√©es pour activer 
        ou d√©sactiver des fonctionnalit√©s.
        
        **Utilisation :**
        """)
        with st.expander('**Utilisation :**', True):
            option_selected = st.checkbox("Activer une option")

            # Affichage en fonction de la s√©lection de la case √† cocher
            if option_selected:
                st.write("L'option est **:blue[activ√©e]** !")
            else:
                st.write("L'option est **:blue[d√©sactiv√©e]**.")
            
        
        with st.expander("Code", True):
            st.code("""
            import streamlit as st

            # Cr√©ation d'une case √† cocher avec st.checkbox
            option_selected = st.checkbox("Activer une option")

            # Affichage en fonction de la s√©lection de la case √† cocher
            if option_selected:
                st.write("L'option est activ√©e !")
            else:
                st.write("L'option est d√©sactiv√©e.")
        """)
        
        
        st.markdown("""
        Dans cet exemple, une case √† cocher est cr√©√©e avec l'√©tiquette "Activer une option". La valeur de la case √† cocher 
        (True ou False) est stock√©e dans la variable `option_selected`. En fonction de la s√©lection de la case √† cocher,
        diff√©rents messages sont affich√©s.

        **Fonctionnalit√©s cl√©s :**
        - **R√©activit√© :** La variable associ√©e √† `st.checkbox` est mise √† jour en temps r√©el en fonction de l'√©tat de la case √† cocher.
        - **Personnalisation :** Vous pouvez personnaliser l'√©tiquette de la case √† cocher pour refl√©ter l'option
        que vous souhaitez activer ou d√©sactiver.
        - **Utilisation conditionnelle :** Vous pouvez utiliser la valeur de la case √† cocher pour prendre des 
        d√©cisions conditionnelles dans votre application.

        En utilisant `st.checkbox`, vous pouvez ajouter des fonctionnalit√©s 
        interactives √† votre application Streamlit, permettant aux utilisateurs 
        de contr√¥ler certains aspects de l'interface utilisateur en fonction de 
        leurs pr√©f√©rences. Cela peut √™tre particuli√®rement utile pour activer ou 
        d√©sactiver des visualisations, des filtres ou d'autres fonctionnalit√©s de 
        mani√®re flexible.
        """)
    with c :
        st.markdown("""
        `st.radio` est une fonction dans Streamlit qui permet de 
        cr√©er un ensemble de boutons radio. Les boutons radio permettent 
        aux utilisateurs de choisir une seule option parmi plusieurs, 
        offrant une s√©lection mutuellement exclusive.""")
        
        with st.expander(" **Utilisation : Radio vertical**", True):
        # Cr√©ation d'un ensemble de boutons radio avec st.radio
            selected_option = st.radio("S√©lectionnez une option", 
            ["Option 1", "Option 2", "Option 3"], horizontal = True)

            # Affichage en fonction de l'option s√©lectionn√©e
            st.write(f"Vous avez s√©lectionn√© : **:blue[{selected_option}]**")
        with st.expander('**Utilisation : Radio horizontal**', True):
        # Cr√©ation d'un ensemble de boutons radio avec st.radio
            selected_option = st.radio("S√©lectionnez une option", 
                ["Option 1", "Option 2", "Option 3"])

            # Affichage en fonction de l'option s√©lectionn√©e
            st.write(f"Vous avez s√©lectionn√© : **:blue[{selected_option}]**")
        with st.expander("Code : Radio vertical", True):
            st.code("""
        import streamlit as st

        # Cr√©ation d'un ensemble de boutons radio avec st.radio
        selected_option = st.radio("S√©lectionnez une option", 
        ["Option 1", "Option 2", "Option 3"])

        # Affichage en fonction de l'option s√©lectionn√©e
        st.write(f"Vous avez s√©lectionn√© : {selected_option}") 
        """)
        with st.expander("Code : Radio horizontal", True):
            st.code("""
        import streamlit as st

        # Cr√©ation d'un ensemble de boutons radio avec st.radio
        selected_option = st.radio("S√©lectionnez une option", 
        ["Option 1", "Option 2", "Option 3"], horizontal = True)

        # Affichage en fonction de l'option s√©lectionn√©e
        st.write(f"Vous avez s√©lectionn√© : {selected_option}") 
        """)
        
        st.markdown("""
        Dans cet exemple, un ensemble de boutons radio est cr√©√© avec 
        l'√©tiquette "S√©lectionnez une option" et les options "Option 1", 
        "Option 2" et "Option 3". La valeur s√©lectionn√©e est stock√©e dans 
        la variable `selected_option`, et un message est affich√© en 
        fonction de l'option s√©lectionn√©e.

        **Fonctionnalit√©s cl√©s :**
        - **S√©lection mutuellement exclusive :** Les boutons radio 
        permettent √† l'utilisateur de choisir une seule option parmi 
        plusieurs.
        - **Personnalisation :** Vous pouvez personnaliser l'√©tiquette et l
        es options des boutons radio pour correspondre √† votre application.
        - **R√©activit√© :** La variable associ√©e √† `st.radio` 
        est mise √† jour en temps r√©el en fonction de l'option s√©lectionn√©e.

        `st.radio` est particuli√®rement utile lorsque vous avez une 
        liste d'options parmi lesquelles l'utilisateur doit faire un choix 
        exclusif. Cela peut √™tre utilis√© dans divers contextes, tels
        que la s√©lection de filtres, le choix de cat√©gories, etc.
        """)
    with d : 
        st.markdown("""
            `st.selectbox` est une fonction de Streamlit qui permet de 
            cr√©er une bo√Æte de s√©lection d√©roulante (select box). Cette 
            bo√Æte de s√©lection permet aux utilisateurs de choisir une 
            option parmi une liste d√©roulante d'options.""")
        with st.expander('**Utilisation :**', True):
            # Cr√©ation d'une bo√Æte de s√©lection avec st.selectbox
            selected_option = st.selectbox("S√©lectionnez une option", 
                ["Option 1", "Option 2", "Option 3"])

            # Affichage en fonction de l'option s√©lectionn√©e
            st.write(f"Vous avez s√©lectionn√© : **:blue[{selected_option}]**")
        with st.expander("Code ", True):
            st.code("""
            import streamlit as st

            # Cr√©ation d'une bo√Æte de s√©lection avec st.selectbox
            selected_option = st.selectbox("S√©lectionnez une option", 
                ["Option 1", "Option 2", "Option 3"])

            # Affichage en fonction de l'option s√©lectionn√©e
            st.write(f"Vous avez s√©lectionn√© : {selected_option}")""")
        
        st.markdown("""
            Dans cet exemple, une bo√Æte de s√©lection d√©roulante est cr√©√©e avec 
            l'√©tiquette "S√©lectionnez une option" et les options "Option 1", 
            "Option 2" et "Option 3". La valeur s√©lectionn√©e est stock√©e dans la 
            variable `selected_option`, et un message est affich√© en fonction de 
            l'option choisie.

            **Fonctionnalit√©s cl√©s :**
            - **Liste d√©roulante :** Les utilisateurs peuvent choisir une option dans 
            une liste d√©roulante.
            - **Personnalisation :** Vous pouvez personnaliser l'√©tiquette et les 
            options de la bo√Æte de s√©lection pour r√©pondre aux besoins de votre 
            application.
            - **R√©activit√© :** La variable associ√©e √† `st.selectbox` est mise √† jour 
            en temps r√©el en fonction de l'option s√©lectionn√©e.

            `st.selectbox` est utile lorsque vous avez une liste d'options parmi 
            lesquelles l'utilisateur peut choisir, et vous souhaitez utiliser une 
            interface de s√©lection d√©roulante. Cela peut √™tre appliqu√© dans divers 
            sc√©narios, 
            tels que la s√©lection de cat√©gories, de filtres, ou d'autres options.
            """)
        with e : 
            st.markdown("""
            `st.multiselect` est une fonction dans Streamlit qui permet de 
            cr√©er une bo√Æte de s√©lection multiple. Cette bo√Æte de s√©lection 
            permet aux utilisateurs de choisir plusieurs options parmi une 
            liste d√©roulante.
            """)
            with st.expander('**Utilisation : Sans valeur par d√©faut**', True):
                # Cr√©ation d'une bo√Æte de s√©lection multiple avec st.multiselect
                selected_options = st.multiselect("S√©lectionnez plusieurs options", 
                        options = ["Option 1", "Option 2", "Option 3"])

                # Affichage en fonction des options s√©lectionn√©es
                st.write(f"Vous avez s√©lectionn√© : **:blue[{selected_options}]**")
            with st.expander('**Utilisation : Avec valeur par d√©faut**', True):
                # Cr√©ation d'une bo√Æte de s√©lection multiple avec st.multiselect
                selected_options = st.multiselect("S√©lectionnez plusieurs options", 
                    options = ["Option 1", "Option 2", "Option 3"], 
                    default = ["Option 1"])

                # Affichage en fonction des options s√©lectionn√©es
                st.write(f"Vous avez s√©lectionn√© : **:blue[{selected_options}]**")
            
            with st.expander("Code: Sans valeur par d√©faut ", True):
                st.code("""
                import streamlit as st

                # Cr√©ation d'une bo√Æte de s√©lection multiple avec st.multiselect
                selected_options = st.multiselect("S√©lectionnez plusieurs options", 
                ["Option 1", "Option 2", "Option 3"])

                # Affichage en fonction des options s√©lectionn√©es
                st.write(f"Vous avez s√©lectionn√© : {selected_options}")
                """)
            with st.expander("Code: Avec valeur par d√©faut ", True):
                st.code("""
                import streamlit as st

                # Cr√©ation d'une bo√Æte de s√©lection multiple avec st.multiselect
                selected_options = st.multiselect("S√©lectionnez plusieurs options", 
                ["Option 1", "Option 2", "Option 3"], 
                default = ["Option 1"])

                # Affichage en fonction des options s√©lectionn√©es
                st.write(f"Vous avez s√©lectionn√© : {selected_options}")
                """)
            
            st.markdown("""
                Dans cet exemple, une bo√Æte de s√©lection multiple est 
                cr√©√©e avec l'√©tiquette "S√©lectionnez plusieurs options" 
                et les options "Option 1", "Option 2" et "Option 3". Les 
                valeurs s√©lectionn√©es sont stock√©es dans la variable 
                `selected_options`, 
                et un message est affich√© en fonction des options choisies.

                **Fonctionnalit√©s cl√©s :**
                - **S√©lection multiple :** Les utilisateurs peuvent choisir 
                plusieurs options dans une liste d√©roulante.
                - **Personnalisation :** Vous pouvez personnaliser 
                l'√©tiquette et les options de la bo√Æte de s√©lection 
                multiple.
                - **R√©activit√© :** La variable associ√©e √† `st.multiselect` 
                est mise √† jour en temps r√©el en fonction des options 
                s√©lectionn√©es.

                `st.multiselect` est utile lorsque vous 
                avez une liste d'options parmi lesquelles les utilisateurs 
                peuvent choisir plusieurs √©l√©ments. Cela peut √™tre appliqu√© 
                dans des cas tels que la s√©lection de filtres multiples, la 
                cat√©gorisation, ou d'autres sc√©narios o√π une s√©lection 
                multiple est n√©cessaire.
                """)
    with f : 
        st.markdown("""
            `st.slider` est une fonction dans Streamlit qui 
            permet de cr√©er un curseur (slider) interactif pour permettre 
            aux utilisateurs de choisir une valeur num√©rique dans une 
            plage d√©finie.
            """)
        with st.expander('**Utilisation :**', True):
            #1
            # Cr√©ation d'un curseur avec st.slider
            selected_value = st.slider("S√©lectionnez une valeur", 
            min_value=0, max_value=100, value=50, step=1)

            # Affichage en fonction de la plage de valeurs s√©lectionn√©e
            st.write(f"Vous avez s√©lectionn√© : **:blue[{selected_value}]**")
            
            #2
            selected_value = st.slider("S√©lectionnez une plage de valeurs", 
            min_value=0, max_value=100, value=(25,75), step=1)

            # Affichage en fonction de la plage de valeurs s√©lectionn√©e
            st.write(f"Vous avez s√©lectionn√© : **:blue[{selected_value}]**")
            
            #3
            selected_value = st.slider("S√©lectionnez une plage de temps", 
            value=(time(6,0),time(18,30)))
            
            # Affichage en fonction de la plage de date s√©lectionn√©e
            st.write(f"""Vous avez s√©lectionn√© : **:blue[{selected_value[0]}]** - 
                    **:blue[{selected_value[1]}]**""")
            #4
            selected_value = st.slider("S√©lectionnez une plage de date", 
            value= datetime(year=2024 , month=1 , day=29 , hour=8 , minute=45, second=25 ),
            format = "DD/MM/YYYY - hh:mm")

            # Affichage en fonction de la plage de date s√©lectionn√©e
            st.write(f"""Vous avez s√©lectionn√© : **:blue[{selected_value}]**""")
        with st.expander("Code ", True):
            
            st.code("""
            #1
            # Cr√©ation d'un curseur avec st.slider
            selected_value = st.slider("S√©lectionnez une valeur", 
            min_value=0, max_value=100, value=50, step=1)

            # Affichage en fonction de la plage de valeurs s√©lectionn√©e
            st.write(f"Vous avez s√©lectionn√© : **:blue[{selected_value}]**")
            
            #2
            selected_value = st.slider("S√©lectionnez une plage de valeurs", 
            min_value=0, max_value=100, value=(25,75), step=1)

            # Affichage en fonction de la plage de valeurs s√©lectionn√©e
            st.write(f"Vous avez s√©lectionn√© : **:blue[{selected_value}]**")
            
            #3
            selected_value = st.slider("S√©lectionnez une plage de temps", 
            value=(time(6,0),time(18,30)))
            
            # Affichage en fonction de la plage de date s√©lectionn√©e
            st.write(f'''Vous avez s√©lectionn√© : **:blue[{selected_value[0]}]** - 
                    **:blue[{selected_value[1]}]**''')
            #4
            selected_value = st.slider("S√©lectionnez une plage de date", 
            value= datetime(year=2024 , month=1 , day=29 , hour=8 , minute=45, second=25 ),
            format = "DD/MM/YYYY - hh:mm")

            # Affichage en fonction de la plage de date s√©lectionn√©e
            st.write(f'''Vous avez s√©lectionn√© : **:blue[{selected_value}]**''')
            """)
        st.markdown("""
            Dans cet exemple, un curseur est cr√©√© avec l'√©tiquette 
            "S√©lectionnez une valeur" et une plage allant de 0 √† 100. 
            La valeur s√©lectionn√©e est stock√©e dans la variable 
            `selected_value`, et un message est affich√© en fonction de la 
            valeur choisie.

            **Fonctionnalit√©s cl√©s :**
            - **Plage d√©finie :** Vous pouvez sp√©cifier la plage de valeurs 
            possibles avec les param√®tres `min_value` et `max_value`.
            - **Valeur par d√©faut :** Vous pouvez d√©finir une valeur par 
            d√©faut avec le param√®tre `value`.
            - **Incr√©ment :** Le param√®tre `step` permet de d√©finir 
            l'incr√©ment du curseur.
            - **R√©activit√© :** La variable associ√©e √† `st.slider` est mise 
            √† jour en temps r√©el en fonction du d√©placement du curseur.

            `st.slider` est particuli√®rement utile lorsque 
            vous souhaitez permettre aux utilisateurs de choisir une valeur 
            num√©rique dans une plage continue. Cela peut √™tre appliqu√© dans divers 
            contextes, tels que la s√©lection de plages de dates,
            de seuils, ou d'autres param√®tres num√©riques.
            """)
        with g : 
            st.markdown("""
            `st.number_input` et `st.text_input` sont deux fonctions 
            dans Streamlit qui permettent respectivement de cr√©er des 
            champs de saisie pour les valeurs num√©riques et les textes.
            
            ### `st.number_input` - Entr√©e Num√©rique :
            """)
            with st.expander('**Utilisation :**', True):
                numeric_value = st.number_input("Saisissez une valeur num√©rique", 
                min_value=0.0, max_value=100.0, value=50.0, step=1.0)

                # Affichage de la valeur saisie
                st.write(f"Vous avez saisi : **:blue[{numeric_value}]**")
            with st.expander("Code ", True):
                st.code("""
                import streamlit as st

                # Champ de saisie pour une valeur num√©rique avec st.number_input
                numeric_value = st.number_input("Saisissez une valeur num√©rique", 
                min_value=0.0, max_value=100.0, value=50.0, step=1.0)

                # Affichage de la valeur saisie
                st.write(f"Vous avez saisi : **:blue[{numeric_value}]**") """)
                    

        
            st.markdown("""
            **Fonctionnalit√©s cl√©s de `st.number_input` :**
            - **Plage d√©finie :** Vous pouvez sp√©cifier la plage de valeurs 
            possibles avec les param√®tres `min_value` et `max_value`.
            - **Valeur par d√©faut :** Vous pouvez d√©finir une valeur par 
            d√©faut avec le param√®tre `value`.
            - **Incr√©ment :** Le param√®tre `step` permet de d√©finir 
            l'incr√©ment de saisie.
            - **R√©activit√© :** La variable associ√©e √† `st.number_input` 
            est mise √† jour en temps r√©el en fonction de la saisie.

            ### `st.text_input` - Entr√©e Textuelle : """)
            with st.expander('**Utilisation :**', True):
                # Champ de saisie pour un texte avec st.text_input
                text_value = st.text_input("Saisissez un texte", 
                "Hello, Streamlit!")

                # Affichage du texte saisi
                st.write(f"Vous avez saisi : **:blue[{text_value}]**")
            with st.expander("Code ", True):
                st.code("""
                import streamlit as st

                # Champ de saisie pour un texte avec st.text_input
                text_value = st.text_input("Saisissez un texte", 
                "Hello, Streamlit!")

                # Affichage du texte saisi
                st.write(f"Vous avez saisi : **:blue[{text_value}]**")
                """)
            st.markdown("""
            **Fonctionnalit√©s cl√©s de `st.text_input` :**
            - **Texte par d√©faut :** Vous pouvez d√©finir un texte par 
            d√©faut avec le deuxi√®me argument (ici "Hello, Streamlit!").
            - **R√©activit√© :** La variable associ√©e √† `st.text_input` 
            est mise √† jour en temps r√©el en fonction de la saisie.

            `st.number_input` et `st.text_input` sont utiles lorsque 
            vous souhaitez permettre aux utilisateurs de saisir des 
            valeurs num√©riques ou du texte, respectivement. Ces champs de 
            saisie sont adapt√©s pour collecter des 
            informations sp√©cifiques dans le cadre d'une application 
            Streamlit.
            """)
        with h :
            st.markdown("""
            `st.date_input` est une fonction dans Streamlit qui permet de cr√©er un s√©lecteur de date interactif. 
            Cette fonction est utile lorsque vous souhaitez permettre aux utilisateurs de s√©lectionner une date sp√©cifique dans votre 
            application Streamlit.

            """)
            with st.expander('**Utilisation :**', True):
                # S√©lecteur de date avec st.date_input
                selected_date = st.date_input("S√©lectionnez une date", date.today())

                # Affichage de la date s√©lectionn√©e
                st.write(f"Vous avez s√©lectionn√© la date : **:blue[{selected_date}]**")
                
            with st.expander("Code ", True):
                st.code("""
                import streamlit as st
                from datetime import date

                # S√©lecteur de date avec st.date_input
                selected_date = st.date_input("S√©lectionnez une date", date.today())

                # Affichage de la date s√©lectionn√©e
                st.write(f"Vous avez s√©lectionn√© la date : **:blue[{selected_date}]**")
                """)
            st.markdown("""
            Dans cet exemple, un s√©lecteur de date est cr√©√© avec l'√©tiquette 
            "S√©lectionnez une date" et la date par d√©faut est d√©finie sur la date du 
            jour. La date s√©lectionn√©e est stock√©e dans la variable `selected_date`, 
            et un message est affich√© en fonction de la date choisie.

            **Fonctionnalit√©s cl√©s :**
            - **Date par d√©faut :** Vous pouvez d√©finir une date par d√©faut avec le 
            deuxi√®me 
            argument (ici, `date.today()` est utilis√© pour d√©finir la date actuelle).
            - **R√©activit√© :** La variable associ√©e √† `st.date_input` est mise √† jour 
            en temps r√©el en fonction de la date s√©lectionn√©e.

            `st.date_input` est particuli√®rement utile dans les applications o√π la 
            s√©lection de dates est cruciale, comme dans les applications de 
            planification, les outils de suivi du temps, 
            ou tout autre sc√©nario o√π la gestion des dates est n√©cessaire.
                    """)
        with i :
            st.markdown("""
            `st.form` est une fonction dans Streamlit qui permet de cr√©er 
            un formulaire interactif dans une application Streamlit. 
            Les formulaires sont utiles lorsque vous souhaitez collecter 
            plusieurs entr√©es de l'utilisateur et traiter ces entr√©es en 
            une seule fois.
            """)
            with st.expander('**Utilisation :**', True):
                # Cr√©ation d'un formulaire avec st.form
                with st.form("Mon Formulaire"):
                    # Ajout de champs de saisie dans le formulaire
                    texte = st.text_input("Entrez du texte")
                    choix = st.selectbox("Choisissez un animal", ["Chien", "Chat", "Lion"])
                    nombre = st.number_input("Entrez un nombre", value = 27)
                    date = st.date_input("S√©lectionnez une date",date.today())

                    # Ajout d'un bouton de soumission
                    soumettre = st.form_submit_button("Soumettre")

                    # Traitement des donn√©es apr√®s la soumission
                    if soumettre:
                        st.write(f'''Vous avez saisi : Texte - **:blue[{texte}]**, Animal - **:blue[{choix}]**, 
                                 Nombre - **:blue[{nombre}]**, Date - **:blue[{date}]**''')
                    
            with st.expander("Code ", True):
                st.code("""
                import streamlit as st

                # Cr√©ation d'un formulaire avec st.form
                with st.form("Mon Formulaire"):
                    # Ajout de champs de saisie dans le formulaire
                    texte = st.text_input("Entrez du texte")
                    choix = st.selectbox("Choisissez un animal", ["Chien", "Chat", "Lion"])
                    nombre = st.number_input("Entrez un nombre", value = 27)
                    date = st.date_input("S√©lectionnez une date",date.today())

                    # Ajout d'un bouton de soumission
                    soumettre = st.form_submit_button("Soumettre")

                # Traitement des donn√©es apr√®s la soumission
                if soumettre:
                    st.write(f'''Vous avez saisi : Texte - **:blue[{texte}]**, Animal - **:blue[{choix}]**,
                    Nombre - **:blue[{nombre}]**, Date - **:blue[{date}]**''') """)
                
        st.markdown("""
            Dans cet exemple, un formulaire est cr√©√© avec l'√©tiquette 
            "Mon Formulaire". √Ä l'int√©rieur du formulaire, plusieurs champs de 
            saisie sont ajout√©s pour collecter du texte, un nombre et une date. 
            Un bouton de soumission est √©galement inclus. Une fois le formulaire 
            soumis, les donn√©es saisies sont affich√©es.

            **Fonctionnalit√©s cl√©s :**
            - **Encapsulation :** Les champs de saisie √† l'int√©rieur du bloc `with st.form` font partie du formulaire.
            - **Bouton de soumission :** `st.form_submit_button` est utilis√© pour ajouter un bouton de soumission au formulaire.
            - **R√©activit√© :** Les variables associ√©es aux champs de saisie dans le formulaire sont mises √† jour en temps r√©el.

            `st.form` est utile lorsque vous avez besoin de collecter plusieurs 
            entr√©es de l'utilisateur en une seule fois et de traiter ces entr√©es de 
            mani√®re coh√©rente. 
            Cela simplifie la gestion des formulaires dans vos applications Streamlit.
                                """)

with tab4 : 
    
    a,b,c,d,e = st.tabs(["Sidebar", "Colonnes","Tabs(Onglets)", "Expander", "Code"])
    
    with a : 
        st.markdown(""" 
            `st.sidebar` est une fonction dans Streamlit qui permet de cr√©er des √©l√©ments dans la barre lat√©rale de l'interface 
            utilisateur. La barre lat√©rale est souvent utilis√©e pour afficher des contr√¥les interactifs, des param√®tres ou d'autres 
            √©l√©ments qui ne font pas partie du contenu principal de l'application, mais qui sont accessibles facilement.""")

        
        #   with st.expander('**Utilisation :**', True):
            #    # Utilisation de st.sidebar pour ajouter des √©l√©ments dans la barre lat√©rale
            #    st.sidebar.header("Options")
            #    texte_sidebar = st.sidebar.text_input("Entrez du texte","Abraham")
            #    nombre_sidebar = st.sidebar.number_input("Entrez un nombre", min_value=0, max_value=100, value=27)

                # Affichage des valeurs saisies dans le contenu principal
            #    st.write(f"Vous avez saisi en barre lat√©rale : Texte - **:blue[{texte_sidebar}]**, Nombre - **:blue[{nombre_sidebar}]**")
        
        with st.expander("Code ", True):
            st.code("""  
                    import streamlit as st

                    # Utilisation de st.sidebar pour ajouter des √©l√©ments dans la barre lat√©rale
                    st.sidebar.header("Options")
                    texte_sidebar = st.sidebar.text_input("Entrez du texte","Abraham")
                    nombre_sidebar = st.sidebar.number_input("Entrez un nombre", min_value=0, max_value=100, value=27)

                    # Affichage des valeurs saisies dans le contenu principal
                    st.write(f"Vous avez saisi en barre lat√©rale : Texte - **:blue[{texte_sidebar}]**, Nombre - **:blue[{nombre_sidebar}]**")
                    """)
            st.markdown(""" 
            Dans cet exemple, un champ de saisie de texte et un curseur num√©rique sont ajout√©s √† la barre lat√©rale √† l'aide de
            `st.sidebar`. Les valeurs saisies dans la barre lat√©rale sont ensuite affich√©es dans le contenu principal de l'application.

            **Fonctionnalit√©s cl√©s :**
            - **Contr√¥les interactifs :** Vous pouvez utiliser `st.sidebar` pour ajouter divers contr√¥les interactifs tels que des champs de 
            saisie, des curseurs, des boutons, etc.
            - **R√©activit√© :** Les valeurs associ√©es aux contr√¥les dans la barre lat√©rale sont mises √† jour en temps r√©el.
            - **Organisation :** La barre lat√©rale est utile pour organiser les param√®tres et contr√¥les de mani√®re √† ne pas encombrer le contenu 
            principal de l'application.

            L'utilisation de `st.sidebar` permet d'ajouter une dimension interactive et personnalis√©e √† votre application Streamlit en pla√ßant 
            certains √©l√©ments dans une barre lat√©rale distincte.
            """)
    with b : 
    
        st.markdown("""
        `st.columns` est une fonction dans Streamlit qui permet de cr√©er des colonnes dans la mise en page de votre application. Cette 
        fonction est particuli√®rement utile lorsque vous souhaitez organiser le contenu de votre application en colonnes pour une pr√©sentation 
        plus structur√©e. """)

        with st.expander('**Utilisation :**', True):
            colonne1, colonne2 = st.columns(2)

            # Ajout de contenu dans chaque colonne
            with colonne1:
                st.header("Colonne 1")
                st.write("Contenu de la colonne ") 
                st.image("images/chien.png")

            with colonne2:
                st.header("Colonne 2")
                st.write("Contenu de la colonne 2") 
                st.image("images/minion.jpg")
        with st.expander("Code ", True):
            st.code("""  
            import streamlit as st

            # Cr√©ation de deux colonnes avec st.columns
            colonne1, colonne2 = st.columns(2)

            # Ajout de contenu dans chaque colonne
            with colonne1:
                st.header("Colonne 1")
                st.write("Contenu de la colonne ") 
                st.image("images/chien.png")

            with colonne2:
                st.header("Colonne 2")
                st.write("Contenu de la colonne 2") 
                st.image("images/minion.jpg")
                """)
        st.markdown("""
        Dans cet exemple, deux colonnes sont cr√©√©es √† l'aide de `st.columns(2)`, ce qui divise l'espace horizontal 
        en deux parties √©gales. Ensuite, du contenu est ajout√© √† chaque colonne avec les blocs `with colonne1:` et `with colonne2:`.

        **Fonctionnalit√©s cl√©s :**
        - **R√©partition de l'espace :** Vous pouvez sp√©cifier le nombre de colonnes que vous souhaitez en passant un argument √† `st.columns(n)`,
        o√π `n` est le nombre de colonnes.
        - **Contenu dans chaque colonne :** Vous pouvez ajouter du contenu, des widgets, des graphiques, etc., √† chaque colonne en 
        utilisant les blocs `with colonneX:`.

        `st.columns` est utile pour cr√©er une disposition de colonnes personnalis√©e dans votre application Streamlit, ce qui est particuli√®rement pratique lorsque 
        vous avez plusieurs √©l√©ments √† afficher de mani√®re c√¥te √† c√¥te.
                                """)
    with c: 
        st.markdown(""""
                    
                        """)
    with d: 
        st.markdown("""
        `st.expander` est une fonction dans Streamlit qui permet de cr√©er un panneau extensible (expander) dans lequel vous pouvez inclure du contenu. 
        Cela est utile lorsque vous avez du contenu suppl√©mentaire que vous souhaitez rendre initialement cach√© et permettre √† l'utilisateur de l'expander ou de le r√©duire 
        selon ses besoins.
        
        ### **Utilisation**
        """)


        with st.expander("Cliquez pour afficher le contenu",False):
            st.write("**:blue[Contenu cach√© que vous pouvez √©tendre ou r√©duire].**")
        with st.expander("Code ", True):
            st.code("""  
            # Utilisation de st.expander pour cr√©er un panneau extensible
            with st.expander("Cliquez pour afficher le contenu",False):
                st.write("Contenu cach√© que vous pouvez √©tendre ou r√©duire.")
                    """)
            
        st.markdown("""
        Dans cet exemple, le texte "Cliquez pour afficher le contenu" est affich√© en tant que titre du panneau extensible cr√©√© avec `st.expander`. 
        Lorsque l'utilisateur clique sur ce titre, le panneau s'√©tend pour r√©v√©ler le contenu cach√©, et il peut √™tre r√©duit √† nouveau en cliquant sur le titre.

        **Fonctionnalit√©s cl√©s :**
        - **Contenu extensible :** Vous pouvez inclure n'importe quel widget ou contenu √† l'int√©rieur du panneau extensible.
        - **Facilit√© d'utilisation :** L'utilisateur peut cliquer sur le titre pour √©tendre ou r√©duire le panneau, ce qui permet de conserver un espace propre dans votre 
        application.

        `st.expander` est particuli√®rement utile lorsque vous avez des informations compl√©mentaires ou des d√©tails que vous ne souhaitez pas afficher imm√©diatement, mais que 
        vous souhaitez rendre disponibles de mani√®re optionnelle √† l'utilisateur.
        """)
    with e: 
        st.markdown("""
        La fonction `st.code` dans Streamlit est utilis√©e pour afficher du code source dans votre application Streamlit. Elle prend en charge plusieurs langages de 
        programmation et fournit une mise en forme syntaxique pour rendre le code plus lisible.
        """)
        
        with st.expander('**Utilisation :**', True):
            # Utilisation de st.code pour afficher du code Python
            code_python = '''
            public class HelloWorld {
                public static void main(String[] args) {
                    System.out.println("Hello, World!");
                }
            }
            '''

            st.code(code_python, language='java')
        with st.expander("Code ", True):
            st.code(""" 
            import streamlit as st

            # Utilisation de st.code pour afficher du code Python
            code_python = '''
            public class HelloWorld {
                public static void main(String[] args) {
                    System.out.println("Hello, World!");
                }
            }
            '''

            st.code(code_python, language='java')
                    """)
        st.markdown("""
        Dans cet exemple, le code Python contenu dans la cha√Æne `code_python` est affich√© √† l'aide de `st.code`. L'argument `language` sp√©cifie le langage du code pour une 
        mise en forme syntaxique appropri√©e.

        **Fonctionnalit√©s cl√©s :**
        - **Prise en charge de plusieurs langages :** Vous pouvez sp√©cifier le langage du code source pour une mise en forme syntaxique correcte.
        - **Mise en forme syntaxique :** Le code est pr√©sent√© de mani√®re √† ce que les √©l√©ments tels que les mots-cl√©s, les cha√Ænes de caract√®res, 
        les commentaires, etc., soient mis en surbrillance pour une meilleure lisibilit√©.
        - **Possibilit√© de plier/d√©plier le code :** Streamlit offre une fonctionnalit√© qui permet de plier et d√©plier le code pour √©conomiser de l'espace.

        L'utilisation de `st.code` est particuli√®rement utile lorsque vous souhaitez partager des exemples de code, des extraits de code ou des d√©monstrations 
        dans votre application Streamlit.
                                """)