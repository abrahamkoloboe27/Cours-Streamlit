import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import matplotlib.pyplot as plt
st.set_page_config(
    page_title="üìä Traitement et Visualisation des donn√©es",
    page_icon=":chart_with_upwards_trend:",
    layout="wide",
    initial_sidebar_state="expanded",
)
with st.sidebar : 
    st.markdown("""
    ## Authors
    John R. AOGA
    * Email : <johnaoga@gmail.com>
    * WhatsApp : +229 97 99 92 77
    * Linkedin : [John AOGA](https://www.linkedin.com/in/john-aoga-2ba6a862/)
                
    Abraham KOLOBOE
    * Email : <abklb27@gmail.com>
    * WhatsApp : +229 91 83 84 21
    * Linkedin : [Abraham KOLOBOE](https://www.linkedin.com/in/abraham-koloboe-630683263)
                """)
st.title("üìä Traitement et Visualisation des donn√©es")
tab1,tab4, tab2, tab3 = st.tabs(["‚è´M√©triques", "üì•Upload data","‚òÅÔ∏èData Frame","„ÄΩÔ∏èCharts"])

with tab1 : 
    st.markdown("""
    La fonction `st.metric` dans Streamlit est utilis√©e pour afficher une m√©trique (nombre ou mesure) dans votre application Streamlit. 
    C'est une mani√®re visuellement attrayante de pr√©senter des valeurs num√©riques importantes.
     """)
        
    with st.expander('**Utilisation :**', True):
        
        metric_value = st.number_input("Valeur", 27)
        st.metric(label="Ma M√©trique", value=metric_value, delta=5.2)
        
    with st.expander("Code ", True):
        st.code(""" 
        import streamlit as st

        # Utilisation de st.metric pour afficher une m√©trique
        metric_value = st.number_input("Valeur", 27)
        st.metric(label="Ma M√©trique", value=metric_value, delta=5.2, delta_color="inverse")
                    """)
    
    st.markdown("""
    Dans cet exemple, `label` repr√©sente l'√©tiquette de la m√©trique, `value` repr√©sente la valeur num√©rique principale √† afficher, 
    `delta` est une valeur suppl√©mentaire √† afficher (par exemple, la diff√©rence par rapport √† une valeur pr√©c√©dente), et `delta_color` 
    sp√©cifie la couleur du delta.

    **Fonctionnalit√©s cl√©s :**
    - **Affichage attrayant :** `st.metric` est con√ßu pour pr√©senter visuellement les m√©triques de mani√®re attrayante.
    - **Compatibilit√© avec les valeurs delta :** Vous pouvez inclure une valeur delta pour montrer la diff√©rence par rapport 
    √† une r√©f√©rence pr√©c√©dente.
    - **Personnalisation de la couleur :** Vous pouvez personnaliser la couleur du delta pour indiquer visuellement si 
    la m√©trique a augment√© ou diminu√©.

    C'est une fonction utile lorsque vous souhaitez mettre en avant des m√©triques importantes dans votre application 
    Streamlit de mani√®re √† la fois lisible et visuellement attrayante.
                    """)
with tab2 : 
    st.markdown("""
    La fonction `st.dataframe` dans Streamlit est utilis√©e pour afficher des DataFrames (tableaux de donn√©es) de mani√®re interactive 
    dans votre application Streamlit.""")

    with st.expander('**Utilisation :**', True) :
        data = {'Nom': ['Alice', 'Bob', 'Charlie'],
                '√Çge': [25, 30, 35],
                'Ville': ['Paris', 'New York', 'Londres']}
        df = pd.DataFrame(data)

        # Affichage du DataFrame avec st.dataframe
        st.dataframe(df)
    with st.expander("Code ", True):
        st.code(""" 
        import streamlit as st
        import pandas as pd

        # Cr√©ation d'un DataFrame de d√©monstration
        data = {'Nom': ['Alice', 'Bob', 'Charlie'],
                '√Çge': [25, 30, 35],
                'Ville': ['Paris', 'New York', 'Londres']}
        df = pd.DataFrame(data)
        # Affichage du DataFrame avec st.dataframe
        st.dataframe(df)
                """)
    st.markdown("""
    Dans cet exemple, `df` est un DataFrame Pandas, et `st.dataframe(df)` est utilis√© pour afficher ce DataFrame dans l'application Streamlit.

    **Fonctionnalit√©s cl√©s :**
    - **Interactivit√© :** Le tableau de donn√©es est interactif, ce qui permet aux utilisateurs de trier les colonnes, de redimensionner les colonnes, etc.
    - **Affichage complet ou partiel :** Streamlit peut afficher automatiquement un DataFrame complet ou une partie de celui-ci, en fonction de la taille des donn√©es.
    - **Personnalisation :** Vous pouvez ajuster le comportement et l'apparence du tableau en fonction de vos besoins.

    `st.dataframe` est un moyen pratique d'afficher des donn√©es tabulaires dans votre application Streamlit, et il est souvent utilis√© pour pr√©senter des r√©sultats d'analyse de donn√©es ou des jeux de donn√©es.
                """)
with tab3 : 
    a,b,c,d,e = st.tabs(["üìâLine Charts", "üìäBar Charts", "üìåMap","üßÆMatplotlib Charts","üîçPlotly Charts"])
    with a : 
        st.markdown("""
        La fonction `st.line_chart` dans Streamlit est utilis√©e pour afficher un graphique en ligne (line chart) interactif 
        dans votre application Streamlit. Cette fonction prend en charge les graphiques bas√©s sur les lignes, tels que les s√©ries 
        chronologiques.""")

        with st.expander('**Utilisation :**', True) :            
            df = pd.DataFrame(np.random.randn(20,3), columns = ["A","B","C"])
            st.line_chart(df)
        with st.expander("Code ", True):
            st.code(""" 
            import streamlit as st
            import pandas as pd
            import numpy as np

            # Cr√©ation d'un DataFrame de d√©monstration avec des donn√©es temporelles
             df = pd.DataFrame(np.random.randn(20,3), columns = ["A","B","C"])

            # Affichage du graphique en ligne avec st.line_chart
            st.line_chart(df)
                    """)
        st.markdown("""

        Dans cet exemple, `df` est un DataFrame Pandas contenant des donn√©es temporelles, et `st.line_chart(df.set_index('Date'))` 
        est utilis√© pour afficher un graphique en ligne bas√© sur ces donn√©es temporelles.

        **Fonctionnalit√©s cl√©s :**
        - **Interactivit√© :** Le graphique en ligne est interactif, ce qui permet aux utilisateurs de zoomer, d√©placer, et explorer les 
        donn√©es.
        - **Personnalisation :** Vous pouvez personnaliser le graphique en ligne en ajustant les options telles que les √©tiquettes d'axe, 
        les couleurs, etc.
        - **Compatibilit√© avec les donn√©es Pandas :** `st.line_chart` fonctionne bien avec les objets DataFrame de Pandas.

        `st.line_chart` est couramment utilis√© pour visualiser des s√©ries temporelles, mais il peut √©galement √™tre utilis√© pour 
        d'autres types de donn√©es o√π une repr√©sentation graphique en ligne est pertinente.
        """)
    with b  : 
        st.markdown("""
        La fonction `st.bar_chart` dans Streamlit est utilis√©e pour afficher un graphique √† barres (bar chart) 
        interactif dans votre application Streamlit.
                            """)
        with st.expander('**Utilisation :**', True) :            
            df = pd.DataFrame(np.random.rand(20,3), columns = ["A","B","C"])
            st.bar_chart(df)
        with st.expander("Code ", True):
            st.code(""" 
            # Cr√©ation d'un DataFrame de d√©monstration
            df = pd.DataFrame(np.random.rand(20,3), columns = ["A","B","C"])
            
            # Affichage du graphique √† barres avec st.bar_chart
            st.bar_chart(df)
                    """)
        st.markdown("""
        Dans cet exemple, `df` est un DataFrame Pandas contenant des donn√©es de cat√©gorie et de valeur, et 
        `st.bar_chart(df.set_index('Cat√©gorie'))` est utilis√© pour afficher un graphique √† barres bas√© sur ces donn√©es.

        **Fonctionnalit√©s cl√©s :**
        - **Interactivit√© :** Le graphique √† barres est interactif, ce qui permet aux utilisateurs de 
        zoomer, d√©placer, et explorer les donn√©es.
        - **Personnalisation :** Vous pouvez personnaliser le graphique √† barres en ajustant les options telles que les couleurs, 
        les √©tiquettes d'axe, etc.
        - **Compatibilit√© avec les donn√©es Pandas :** `st.bar_chart` fonctionne bien avec les objets DataFrame de Pandas.

        Cette fonction est couramment utilis√©e pour repr√©senter graphiquement des cat√©gories et leurs valeurs associ√©es sous 
        forme de barres, ce qui est utile pour visualiser des comparaisons entre diff√©rentes cat√©gories.
                    """)  
    with c : 
        st.markdown("""
        La fonction `st.map` dans Streamlit est utilis√©e pour afficher une carte interactive dans votre application Streamlit. 
        Elle prend en charge la visualisation de donn√©es g√©ographiques, telles que des points sur une carte.
        """)
        
        with st.expander('**Utilisation :**', True) : 
            
            df = pd.DataFrame( np.random.randn(100,2) /[100,100] + [6.36 ,2.43],
                columns = ['lat', 'lon']                
                )
            st.map(df)
        with st.expander("Code ", True):
            st.code(""" 
            import streamlit as st
            import pandas as pd

            # Cr√©ation d'un DataFrame de d√©monstration avec des coordonn√©es g√©ographiques
            df = pd.DataFrame( np.random.randn(100,2) /[50,50] + [37.76 ,-122.4],
                columns = ['lat', 'lon']                
                )

            # Affichage de la carte avec st.map
            st.map(df)
                    """)
        st.markdown("""
        Dans cet exemple, `df` est un DataFrame Pandas contenant des coordonn√©es g√©ographiques (latitude et longitude) ainsi que des informations sur les villes. `st.map(df)` est utilis√© pour afficher ces points sur une carte interactive.

        **Fonctionnalit√©s cl√©s :**
        - **Points interactifs :** Les points sur la carte sont interactifs, et les utilisateurs peuvent zoomer et d√©placer la carte.
        - **Personnalisation :** Vous pouvez personnaliser la carte en ajustant des options telles que le niveau de zoom initial, les marqueurs de couleur, etc.
        - **Compatibilit√© avec les donn√©es g√©ographiques :** `st.map` fonctionne bien avec les donn√©es qui incluent des coordonn√©es g√©ographiques.

        Cette fonction est particuli√®rement utile lorsque vous souhaitez repr√©senter visuellement des donn√©es spatiales, comme des emplacements g√©ographiques sp√©cifiques.
                            """)
    with d :
        st.markdown("""
        La fonction `st.pyplot` dans Streamlit est utilis√©e pour afficher des graphiques g√©n√©r√©s avec Matplotlib dans votre application 
        Streamlit. Elle offre une int√©gration simple et efficace avec Matplotlib pour visualiser des donn√©es dans vos applications.

       """)
        with st.expander('**Utilisation :**', True) : 
            x = np.linspace(- 2 * np.pi, 2 * np.pi, 100)
            y = np.sin(x)
            # Affichage du graphique avec st.pyplot
            fig, ax = plt.subplots()
            ax.plot(x, y)
            st.pyplot(fig)
        with st.expander("Code ", True):
            st.code(""" 
            import streamlit as st
            import matplotlib.pyplot as plt
            import numpy as np

            # Cr√©ation d'un graphique avec Matplotlib
            x = np.linspace(- 2 * np.pi, 2 * np.pi, 100)
            y = np.sin(x)

            # Affichage du graphique avec st.pyplot
            fig, ax = plt.subplots()
            ax.plot(x, y)
            st.pyplot(fig)
                    """)
        st.markdown("""
        Dans cet exemple, un graphique sinusoidal simple est cr√©√© avec Matplotlib, puis affich√© dans l'application Streamlit √† l'aide de `st.pyplot`.

        **Fonctionnalit√©s cl√©s :**
        - **Int√©gration avec Matplotlib :** Vous pouvez utiliser `st.pyplot` pour afficher des graphiques g√©n√©r√©s avec la biblioth√®que Matplotlib.
        - **Interactivit√© :** Les graphiques affich√©s avec `st.pyplot` sont interactifs, ce qui signifie que les utilisateurs peuvent zoomer, d√©placer, et explorer les donn√©es.
        - **Compatibilit√© avec les autres √©l√©ments Streamlit :** Les graphiques Matplotlib peuvent √™tre int√©gr√©s de mani√®re transparente avec d'autres √©l√©ments Streamlit dans votre application.

        L'utilisation de `st.pyplot` est courante lorsque vous avez besoin d'afficher des graphiques g√©n√©r√©s avec Matplotlib dans vos applications Streamlit. Cela peut √™tre utile pour la visualisation de donn√©es et l'analyse exploratoire.
                            """)
    with e :
        st.markdown("""
        La fonction `st.plotly_chart` dans Streamlit est utilis√©e pour afficher des graphiques g√©n√©r√©s avec Plotly dans votre application 
        Streamlit. Plotly est une biblioth√®que de visualisation qui offre une grande flexibilit√© et des fonctionnalit√©s interactives.
        """)
        
        with st.expander('**Utilisation :**', True) : 
            df = pd.DataFrame(np.random.rand(20,3), columns = ["A","B","C"])
            # Cr√©ation d'un graphique √† barres avec Plotly Express
            fig = px.bar(df, title='Graphique √† Barres avec Plotly Express')
            # Affichage du graphique avec st.plotly_chart
            st.plotly_chart(fig)
        with st.expander("Code ", True):
            st.code(""" 
            import streamlit as st
            import plotly.express as px
            import pandas as pd
            import numpy as np

            # Cr√©ation d'un DataFrame de d√©monstration
            df = pd.DataFrame(np.random.rand(20,3), columns = ["A","B","C"])

            # Cr√©ation d'un graphique √† barres avec Plotly Express
            fig = px.bar(df, title='Graphique √† Barres avec Plotly Express')

            # Affichage du graphique avec st.plotly_chart
            st.plotly_chart(fig)
                    """)
        st.markdown("""
        Dans cet exemple, Plotly Express est utilis√© pour cr√©er un graphique √† barres √† partir d'un DataFrame Pandas, 
        puis le graphique est affich√© dans une application Streamlit √† l'aide de `st.plotly_chart`.

        **Fonctionnalit√©s cl√©s :**
        - **Int√©gration avec Plotly :** Vous pouvez utiliser `st.plotly_chart` pour afficher des graphiques g√©n√©r√©s avec 
        la biblioth√®que Plotly.
        - **Interactivit√© :** Les graphiques affich√©s avec `st.plotly_chart` sont interactifs, ce qui signifie que les 
        utilisateurs peuvent zoomer, d√©placer, et explorer les donn√©es.
        - **Compatibilit√© avec les autres √©l√©ments Streamlit :** Les graphiques Plotly peuvent √™tre int√©gr√©s de mani√®re 
        transparente avec d'autres √©l√©ments Streamlit dans votre application.

        L'utilisation de `st.plotly_chart` est courante lorsque vous avez besoin de cr√©er des visualisations interactives et 
        personnalisables dans vos applications Streamlit. Cela peut √™tre particuli√®rement utile pour les applications n√©cessitant 
        des fonctionnalit√©s avanc√©es de visualisation des donn√©es.
                            """)
with tab4 :
    st.markdown("""
    La fonction `st.uploader` dans Streamlit est utilis√©e pour permettre aux utilisateurs de t√©l√©charger 
    des fichiers dans votre application Streamlit. Elle fournit une interface conviviale pour que les utilisateurs 
    puissent s√©lectionner et t√©l√©charger des fichiers depuis leur propre machine.""")

    
    with st.expander('**Utilisation :**', True) : 
        file = st.file_uploader("Importer vos donn√©es ici", type="csv")

        # V√©rification si un fichier a √©t√© t√©l√©charg√©
        if file is not None:
            # Traitement du fichier t√©l√©charg√© (par exemple, afficher les 5 premi√®res lignes d'un DataFrame Pandas)
            df = pd.read_csv(file)
            st.dataframe(df.head())
    with st.expander("Code ", True):
        st.code("""
        import streamlit as st

        # Affichage de l'uploader dans l'application Streamlit
        file = st.file_uploader("Importer vos donn√©es ici", type=["csv"])

        # V√©rification si un fichier a √©t√© t√©l√©charg√©
        if file is not None:
            # Traitement du fichier t√©l√©charg√© (par exemple, afficher les 5 premi√®res lignes d'un DataFrame Pandas)
            df = pd.read_csv(file)
            st.dataframe(df.head())
                    """)
            
    st.markdown("""
    Dans cet exemple, `st.uploader` affiche un bouton permettant aux utilisateurs de s√©lectionner un 
    fichier CSV √† t√©l√©charger. Le param√®tre `type` est utilis√© pour sp√©cifier le type de fichier autoris√© (dans cet exemple, 
    uniquement les fichiers CSV).

    **Fonctionnalit√©s cl√©s :**
    - **Interface conviviale :** Les utilisateurs peuvent cliquer 
    sur un bouton pour s√©lectionner des fichiers √† t√©l√©charger.
    - **Sp√©cification du type de fichier :** Vous pouvez limiter 
    les types de fichiers autoris√©s en utilisant le param√®tre `type`.
    - **Manipulation du fichier t√©l√©charg√© :** Une fois un fichier t√©l√©charg√©, 
    vous pouvez effectuer des op√©rations de traitement sur le fichier, par exemple en le chargeant dans un DataFrame Pandas.

    L'utilisation de `st.uploader` est courante lorsque vous souhaitez permettre aux utilisateurs de 
    t√©l√©charger des fichiers dans votre application Streamlit, ce qui est utile dans de nombreuses situations, 
    notamment pour l'analyse de donn√©es et le traitement de fichiers.
                """)