import streamlit as st
st.set_page_config(
    page_title="üßê Applications avanc√©es",
    page_icon=":chart_with_upwards_trend:",
    layout="wide",
    initial_sidebar_state="expanded",
)
st.title("üßê Applications avanc√©es")
with st.sidebar : 
    st.markdown("""
    ## Auteurs
    John R. AOGA
    * Linkedin : [John AOGA](https://www.linkedin.com/in/john-aoga-2ba6a862/)
                
""")
with st.sidebar : 
        st.markdown("""
        ## Auteur
        :blue[Abraham KOLOBOE]
        * Email : <abklb27@gmail.com>
        * WhatsApp : +229 91 83 84 21
        * Linkedin : [Abraham KOLOBOE](https://www.linkedin.com/in/abraham-zacharie-koloboe-data-science-ia-generative-llms-machine-learning)
                    """)
tab1 , tab2 , tab3, tab4, tab5 = st.tabs(["Applications multi-pages", "Session state", 
                              "Barre de progression", "Spinner", "Configuration de pages"])


with tab1 : 
    st.markdown("""
    Pour cr√©er une application multi-pages, il vous faut cre√©r dans le dossier racine de votre application, 
    un sous-dossier **:blue[pages]** et y cr√©er un fichier **:red[.py]** pour chacune des pages de votre application
                """)
    with st.expander("**Utilisation**", True) : 
        st.image("images/mp.png")
        st.image("images/mp_2.png")

with tab2 : 
    st.markdown("""
        `st.session_state` est une fonctionnalit√© de Streamlit, une biblioth√®que Python pour cr√©er des 
                applications web de mani√®re simple. Elle permet de stocker et de r√©cup√©rer des informations 
                sp√©cifiques √† une session utilisateur, permettant ainsi de conserver des variables entre diff√©rentes 
                fonctions tout au long de la session.

        **Utilit√© :**

        L'utilit√© principale de `st.session_state` r√©side dans la possibilit√© de 
                maintenir un √©tat persistant pendant toute la dur√©e d'une session utilisateur. 
                Cela √©limine le besoin d'utiliser des variables globales pour stocker des informations entre 
                les diff√©rentes parties de votre application Streamlit.

        **Exemple avec du code :**

        Imaginons un exemple simple o√π nous voulons maintenir un compteur qui s'incr√©mente √† chaque 
                fois qu'un utilisateur interagit avec l'application. Voici comment vous pourriez utiliser
                `st.session_state` pour atteindre cela :
        """)
    with st.expander("Utilisation ", True):
        # Initialiser l'√©tat de la session
        if 'compteur' not in st.session_state:
            st.session_state.compteur = 0

        # Fonction pour incr√©menter le compteur
        def incrementer_compteur():
            st.session_state.compteur += 1

        # Afficher le bouton pour incr√©menter le compteur
        if st.button('Incr√©menter le compteur'):
            incrementer_compteur()

        # Afficher la valeur actuelle du compteur
        st.write('Compteur :', st.session_state.compteur)

    st.markdown("""
        ```python
        import streamlit as st

        # Initialiser l'√©tat de la session
        if 'compteur' not in st.session_state:
            st.session_state.compteur = 0

        # Fonction pour incr√©menter le compteur
        def incrementer_compteur():
            st.session_state.compteur += 1

        # Afficher le bouton pour incr√©menter le compteur
        if st.button('Incr√©menter le compteur'):
            incrementer_compteur()

        # Afficher la valeur actuelle du compteur
        st.write('Compteur :', st.session_state.compteur)
        ```

        Dans cet exemple :
        - Nous initialisons le compteur dans la session √† 0 s'il n'est pas d√©j√† pr√©sent.
        - Nous d√©finissons une fonction `incrementer_compteur` qui incr√©mente le compteur.
        - Nous utilisons un bouton dans l'interface utilisateur pour permettre √† 
        l'utilisateur d'incr√©menter le compteur.
        - En utilisant `st.session_state.compteur`, nous acc√©dons √† la valeur du compteur qui 
                est mise √† jour m√™me entre diff√©rents appels de fonctions.

        Ainsi, `st.session_state` nous permet de maintenir l'√©tat de variables √† travers diff√©rentes 
        interactions de l'utilisateur au sein de notre application Streamlit.
                        """)

with tab3 : 
    st.markdown("""
    La fonction `st.progress_bar` dans Streamlit est utilis√©e pour afficher une 
                barre de progression dans votre application web. Cette barre de progression est 
                utile lorsque vous avez une t√¢che longue ou une op√©ration en cours, et vous souhaitez fournir 
                une indication visuelle de son avancement.

    **Utilit√© :**

    L'utilit√© principale de `st.progress_bar` est de rendre l'exp√©rience utilisateur plus conviviale 
                en affichant visuellement l'√©tat d'avancement d'une t√¢che en cours, comme le traitement 
                de donn√©es, le chargement d'informations, etc.

    

    Voici un exemple simple o√π nous utilisons `st.progress_bar` pour simuler une t√¢che en cours qui 
                progresse au fil du temps :""")
    with st.expander("Utilisation ", True):
        import time

        # Simuler une t√¢che en cours
        progress_bar = st.progress(0)

        for i in range(100):
            # Mise √† jour de la barre de progression
            progress_bar.progress(i + 1)
            
            # Simuler une pause pour repr√©senter une t√¢che en cours
            time.sleep(0.1)

        # Fin de la t√¢che
        st.success('T√¢che termin√©e!')
    st.markdown("""
    ```python
    import streamlit as st
    import time

    # Simuler une t√¢che en cours
    progress_bar = st.progress(0)

    for i in range(100):
        # Mise √† jour de la barre de progression
        progress_bar.progress(i + 1)
        
        # Simuler une pause pour repr√©senter une t√¢che en cours
        time.sleep(0.1)

    # Fin de la t√¢che
    st.success('T√¢che termin√©e!')
    ```

    Dans cet exemple :
    - Nous cr√©ons une barre de progression avec `st.progress(0)` et la 
                stockons dans la variable `progress_bar`.
    - Nous utilisons ensuite une boucle pour simuler une t√¢che en cours. √Ä chaque it√©ration, 
                nous mettons √† jour la barre de progression avec `progress_bar.progress(i + 1)`.
    - Une pause est ajout√©e (`time.sleep(0.1)`) pour simuler une op√©ration en cours.
    - Apr√®s la fin de la boucle, nous affichons un message de succ√®s avec `st.success` p
                our indiquer que la t√¢che est termin√©e.

    Ainsi, `st.progress_bar` est un outil utile pour am√©liorer l'exp√©rience utilisateur en f
                ournissant une indication visuelle de l'√©tat d'avancement d'une t√¢che longue dans votre application Streamlit.
                    """)
with tab4 : 
    st.markdown("""
    La fonction `st.spinner` de Streamlit est utilis√©e pour afficher un indicateur de chargement sous forme de spinner (ic√¥ne de chargement tournante). Cela peut √™tre utile lorsque vous effectuez une op√©ration asynchrone ou une t√¢che qui prend du temps, afin d'informer les utilisateurs que quelque chose se passe en arri√®re-plan.

    **Utilit√© :**

    L'utilit√© principale de `st.spinner` est de fournir une indication visuelle que quelque chose est en cours de chargement ou de traitement, ce qui am√©liore l'exp√©rience utilisateur en indiquant clairement que l'application est occup√©e √† effectuer une t√¢che.

    **Exemple avec du code :**

    Voici un exemple simple o√π nous utilisons `st.spinner` pour indiquer le chargement d'une t√¢che asynchrone :""")
    with st.expander("Utilisation ", True):
        import time

        # Fonction simulant une t√¢che asynchrone
        def tache_asynchrone():
            with st.spinner('Chargement en cours...'):
                # Simuler une t√¢che asynchrone
                time.sleep(5)
            st.success('T√¢che termin√©e!')

        # Bouton pour d√©clencher la t√¢che asynchrone
        if st.button('D√©marrer la t√¢che'):
            tache_asynchrone()

    st.markdown("""
    ```python
    import streamlit as st
    import time

    # Fonction simulant une t√¢che asynchrone
    def tache_asynchrone():
        with st.spinner('Chargement en cours...'):
            # Simuler une t√¢che asynchrone
            time.sleep(5)
        st.success('T√¢che termin√©e!')

    # Bouton pour d√©clencher la t√¢che asynchrone
    if st.button('D√©marrer la t√¢che'):
        tache_asynchrone()
    ```

    Dans cet exemple :
    - La fonction `tache_asynchrone` contient le code qui simule une t√¢che asynchrone en utilisant `time.sleep(5)` pour repr√©senter un d√©lai de 5 secondes.
    - La barre de progression (`st.spinner`) est affich√©e avec le message "Chargement en cours..." pendant l'ex√©cution de la t√¢che asynchrone.
    - Une fois la t√¢che termin√©e, un message de succ√®s est affich√© avec `st.success`.

    Cela montre comment `st.spinner` peut √™tre utilis√© pour indiquer de mani√®re visuelle l'avancement ou le chargement d'une t√¢che asynchrone dans votre application Streamlit.
                """)

with tab5 : 
    st.markdown("""
    La fonction `st.set_page_config` de Streamlit est utilis√©e pour configurer 
    les param√®tres de la page de votre application Streamlit. Vous pouvez utiliser 
    cette fonction pour personnaliser divers aspects de l'apparence et du comportement de la page.

    **Exemple avec du code :**

    Voici un exemple o√π nous utilisons `st.set_page_config` pour 
    personnaliser certains param√®tres de la page :

    ```python
    import streamlit as st

    # Configuration de la page
    st.set_page_config(
        page_title="Mon Application Streamlit",
        page_icon=":rocket:",
        layout="wide",
        initial_sidebar_state="expanded",
    )

    # Contenu de l'application
    st.title("Bienvenue dans mon application Streamlit")
    st.write("C'est une d√©monstration de l'utilisation de st.set_page_config.")

    # ... Ajoutez le reste de votre application Streamlit ici ...
    ```

    Dans cet exemple :
    - `page_title` est utilis√© pour d√©finir le titre de la page.
    - `page_icon` permet de sp√©cifier une ic√¥ne qui sera affich√©e dans l'onglet du navigateur.
    - `layout` peut √™tre r√©gl√© sur "wide" pour utiliser un layout plus large.
    - `initial_sidebar_state` peut √™tre r√©gl√© sur "expanded" pour afficher la barre lat√©rale initialement √©tendue.

    Vous pouvez personnaliser ces param√®tres en fonction de vos besoins sp√©cifiques. 
    L'utilisation de `st.set_page_config` vous permet de d√©finir ces configurations 
    au d√©but de votre script Streamlit pour influencer l'apparence globale de votre application.
                    """)
